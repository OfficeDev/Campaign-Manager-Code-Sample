# Setting up your environment #
===============
This guide will help you get your development environment ready to pull down this sample and run it localy in an Android Emulator.

**Table of Contents**
- [Eclipse Android tools](#eclipse-android-tools)
- [Java SDK](#java-sdk)
- [Additional Tools](#additional-tools)
-- [GitHub for Windows](#github-for-windows)
-- [eGit](#egit)
-- [Azure AD and O365 SDK](#azure-ad-and-o365-sdk)
-- [Complete Android SDK](#complete-android-sdk)

## Overview ##
The Campaign Manager Android App was built to demonstrate the power of the new Office 365 APIs which allow developers to access Office 365 services such as OneDrive for Business, Mail, Calendar, Sites and Users & Groups.


## Eclipse Android Tools ##
Eclipse Android Tools

## Java SDK ##
http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html
Recommend 64 Bit version because some O365 SDK prerequisites require 64 bit Java
In any case match the bitness of Eclipse (64 vs 32 bit)
e.g. jdk-8u5-windows-x64.exe 

https://developer.android.com/sdk/index.html
https://developer.android.com/sdk/installing/bundle.html

Install the SDK and Eclipse IDE
1.Unpack the ZIP file (named adt-bundle-<os_platform>.zip) and save it to an appropriate location, such as a "Development" directory in your home directory.
2.Open the adt-bundle-<os_platform>/eclipse/ directory and launch eclipse.

That's it! The IDE is already loaded with the Android Developer Tools plugin and the SDK is ready to go. To start developing, read Building Your First App.

Caution: Do not move any of the files or directories from the adt-bundle-<os_platform> directory. If you move the eclipse or sdk directory, ADT will not be able to locate the SDK and you'll need to manually update the ADT preferences.

## Additional information ##

As you continue developing apps, you may need to install additional versions of Android for the emulator and other packages such as the library for Google Play In-app Billing. To install more packages, use the SDK Manager.

Everything you need to develop Android apps is on this web site, including design guidelines, developer training, API reference, and information about how you can distribute your app. For additional resources about developing and distributing your app, see the Developer Support Resources.

## eGit ##
Add eGit Plugin
Help -> Install New Software
Add Site http://download.eclipse.org/egit/updates/
Select Eclipse Git Team Provider

## Complete Android SDK ##
Download Complete Android SDK 
Launch Android SDK Manager from Eclipse
Select all packages
Click Install xx packages
Accept all the license agreements
Click Install (this will take a while)
After all SDK components have been downloaded you may need to update the Android plugins (Eclipse will show a dialog if you need to update. However the check for updates button may yield nothing)
To get the latest plugin go to
Help -> Install New Software
Select the Android Developer Tools Update Site - https://dl-ssl.google.com/android/eclipse/
Filter by Android
Select All
Next, Next, Accept Licenses, Finish


## Azure AD and O365 SDK ##
Prerequisites
Install the Maven SDK Deployer
Get the Maven binaries here http://maven.apache.org/download.cgi (e.g. apache-maven-3.2.1-bin.zip)
1.Unzip the distribution archive, i.e. apache-maven-3.2.1-bin.zip to the directory you wish to install Maven 3.2.1. These instructions assume you chose C:\Program Files\Apache Software Foundation. The subdirectory apache-maven-3.2.1 will be created from the archive. 
2.Add the M2_HOME environment variable by opening up the system properties (WinKey + Pause), selecting the "Advanced" tab, and the "Environment Variables" button, then adding the M2_HOME variable in the user variables with the value C:\Program Files\Apache Software Foundation\apache-maven-3.2.1. Be sure to omit any quotation marks around the path even if it contains spaces. Note: For Maven 2.0.9, also be sure that the M2_HOME doesn't have a '\' as last character. 
3.In the same dialog, add the M2 environment variable in the user variables with the value %M2_HOME%\bin.
4.Optional: In the same dialog, add the MAVEN_OPTS environment variable in the user variables to specify JVM properties, e.g. the value -Xms256m -Xmx512m. This environment variable can be used to supply extra options to Maven.
5.In the same dialog, update/create the Path environment variable in the user variables and prepend the value %M2% to add Maven available in the command line.
6.In the same dialog, make sure that JAVA_HOME exists in your user variables or in the system variables and it is set to the location of your JDK, e.g. C:\Program Files\Java\jdk1.7.0_51 and that %JAVA_HOME%\bin is in your Path environment variable.
7.Open a new command prompt (Winkey + R then type cmd) and run mvn --version to verify that it is correctly installed.

## GitHub for Windows ##
Install GitHub for Windows or a git shell of your choice
Open Git shell
navigate to the folder where you want to install maven e.g. a peer folder to the ADT directory
git clone https://github.com/mosabua/maven-android-sdk-deployer.git
cd maven-android-sdk-deployer\platforms\android-19
mvn clean install
cd ..\..\extras\compatibility-v4
mvn clean install

## Getting the Azure AD SDK (ADAL) ##
In Eclipse go to Window -> Open Perspective -> Other
Select Git (or Exploring Git Repositories)
This will open a tab labeled Git Repositories
Click on the button to Clone and import a repository
Select Clone URI
Enter https://github.com/MSOpenTech/azure-activedirectory-library-for-android.git 
Next
Select master (it's ok to have any other branches, too)
ADAL has several dependencies that are not present in the repo.
Maven can deploy those. To do that note the path where eGit put the ADAL repo
Go back to the git shell
Navigate to the folder of the ADAL repo (e.g. C:\Users\username\git\azure-activedirectory-library-for-android
run mvn clean install

Now you are ready to start coding
